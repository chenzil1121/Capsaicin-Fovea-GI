/**********************************************************************
Copyright (c) 2024 Advanced Micro Devices, Inc. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
********************************************************************/

#include "../../gpu_shared.h"
#include "../../math/transform.hlsl"
float2   g_NearFar;
float2   g_TexelSize;

Texture2D g_DepthBuffer;
Texture2D g_ShadingNormalBuffer;

RWTexture2D<float> g_EdgeMask;

SamplerState g_NearestSampler;

float GetLinearDepth(in float depth)
{
    return -g_NearFar.x * g_NearFar.y / (depth * (g_NearFar.y - g_NearFar.x) - g_NearFar.y) / g_NearFar.y;
}

[numthreads(16, 16, 1)]
void main(in uint2 did : SV_DispatchThreadID)
{
    // Laplacian 滤波器矩阵
    float3x3 laplacian = float3x3(
        0, -1, 0,
       -1, 4, -1,
        0, -1, 0
    );
    
    float depthValue = 0.0f;
    float normalValue = 0.0f;
    
    float2 baseCoord = did + 0.5f;
    float3 baseNormal = normalize(2.0f * g_ShadingNormalBuffer.SampleLevel(g_NearestSampler, baseCoord * g_TexelSize, 0.0f).xyz - 1.0f);
    
    // 采样周围像素，处理纹理边界
    for (int i = -1; i <= 1; ++i)
    {
        for (int j = -1; j <= 1; ++j)
        {
            // 计算纹理坐标
            float2 sampleCoord = (baseCoord + float2(i, j)) * g_TexelSize;
            
            // 处理边界情况：重复边界处理
            sampleCoord = clamp(sampleCoord, float2(0.0f, 0.0f), float2(1.0f, 1.0f));
            
            float depth = GetLinearDepth(g_DepthBuffer.SampleLevel(g_NearestSampler, sampleCoord, 0.0f).x);
            
            float3 normal = normalize(2.0f * g_ShadingNormalBuffer.SampleLevel(g_NearestSampler, sampleCoord, 0.0f).xyz - 1.0f);
            
            depthValue += depth * laplacian[i + 1][j + 1];
            normalValue += dot(baseNormal, normal) * laplacian[i + 1][j + 1];
        }
    }
    
    float depthMask = abs(depthValue) > 0.01f ? 0.85 : 0;
    float normalMask = abs(normalValue) > 0.8f ? 0.85 : 0;
    
    g_EdgeMask[did] = max(depthMask, normalMask);
}
